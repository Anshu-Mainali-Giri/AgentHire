public with sharing class CandidateAPIService {

    public class CandidateWrapper implements Comparable {
        public Candidate__c candidateRec;
        public Decimal experience;
        public Boolean locationPriority;
        public Integer skillMatches;

        public CandidateWrapper(Candidate__c cand, String jobLocation, List<String> requiredSkills) {
            this.candidateRec = cand;
            this.experience = cand.Experience__c != null ? cand.Experience__c : 0;
            String candLocation = cand.Location__c != null ? cand.Location__c : '';
            this.locationPriority = (!String.isBlank(jobLocation) && candLocation.equalsIgnoreCase(jobLocation));
            this.skillMatches = 0;

            if (cand.Skills__c != null) {
                List<String> candSkills = cand.Skills__c.split(',');
                Set<String> candSet = new Set<String>();
                for (String s : candSkills) {
                    if (s != null) candSet.add(s.trim().toLowerCase());
                }
                for (String reqSkill : requiredSkills) {
                    if (candSet.contains(reqSkill.trim().toLowerCase())) this.skillMatches++;
                }
            }
        }

        public Integer compareTo(Object otherObj) {
            CandidateWrapper other = (CandidateWrapper) otherObj;

            if (this.locationPriority && !other.locationPriority) return -1;
            if (!this.locationPriority && other.locationPriority) return 1;

            if (this.experience > other.experience) return -1;
            if (this.experience < other.experience) return 1;

            if (this.skillMatches > other.skillMatches) return -1;
            if (this.skillMatches < other.skillMatches) return 1;

            return 0;
        }
    }

    public class FetchResponse {
        @AuraEnabled public String message { get; set; }
        @AuraEnabled public List<Candidate__c> candidates { get; set; }
    }

    @AuraEnabled(cacheable=false)
    public static FetchResponse fetchCandidates(Id jobPostId) {

        // 1Ô∏è‚É£ Fetch Job Post
        Job_Post__c jobPost = [
            SELECT Id, Job_Title__c, Location__c, Required_Skills__c, Experience_Required__c, 
                   First_Fetch_Date__c, Last_Fetch_Date__c
            FROM Job_Post__c
            WHERE Id = :jobPostId
            LIMIT 1
        ];
        if (jobPost == null) throw new AuraHandledException('Job Post not found');

        List<String> requiredSkills = jobPost.Required_Skills__c != null
            ? jobPost.Required_Skills__c.split(',')
            : new List<String>();

        // 2Ô∏è‚É£ Check fetch eligibility and determine limit
        DateTime now = DateTime.now();
        Integer fetchLimit = 0;
        String message = '';
        
        if (jobPost.First_Fetch_Date__c == null) {
            // First fetch - 20 candidates
            fetchLimit = 20;
            jobPost.First_Fetch_Date__c = now;
            jobPost.Last_Fetch_Date__c = now;
        } else if (jobPost.Last_Fetch_Date__c != null) {
            Long hoursDiff = (now.getTime() - jobPost.Last_Fetch_Date__c.getTime()) / (1000 * 60 * 60);
            Long daysDiff = (now.getTime() - jobPost.First_Fetch_Date__c.getTime()) / (1000 * 60 * 60 * 24);
            
            if (hoursDiff < 12) {
                message = 'Please wait at least 12 hours before fetching new candidates.';
                fetchLimit = 0;
            } else if (daysDiff < 1 && hoursDiff >= 12) {
                // 12-24 hours after first fetch - 10 candidates
                fetchLimit = 10;
                jobPost.Last_Fetch_Date__c = now;
            } else if (daysDiff >= 1 && daysDiff < 2) {
                // Next day - 5 candidates
                fetchLimit = 5;
                jobPost.Last_Fetch_Date__c = now;
            } else {
                // After 2+ days - no more fetching
                message = 'You already have the best candidates for this role.';
                fetchLimit = 0;
            }
        }
        
        update jobPost;
        
        if (fetchLimit == 0) {
            FetchResponse resp = new FetchResponse();
            resp.message = message;
            resp.candidates = [
                SELECT Id, Candidate_Name__c, Profile_URL__c, Experience__c,
                       Skills__c, Location__c, Rank__c, Is_Top__c
                FROM Candidate__c
                WHERE Job_Post__c = :jobPostId AND Is_Top__c = true
                ORDER BY Rank__c ASC
            ];
            return resp;
        }

        // 3Ô∏è‚É£ Fetch existing candidates
        List<Candidate__c> topExisting = [
            SELECT Id, Candidate_Name__c, Profile_URL__c, Experience__c, Skills__c, Location__c,
                   Rank__c, Is_Top__c
            FROM Candidate__c
            WHERE Job_Post__c = :jobPostId AND Is_Top__c = true
        ];
        Set<String> existingProfiles = new Set<String>();
        for (Candidate__c c : topExisting) {
            if (c.Profile_URL__c != null) existingProfiles.add(c.Profile_URL__c);
        }

        // 4Ô∏è‚É£ Call API
        Http http = new Http();
        HttpRequest req = new HttpRequest();
        req.setEndpoint('callout:LinkedInTalentAPI?jobId=' + EncodingUtil.urlEncode(jobPost.Id, 'UTF-8'));
        req.setMethod('GET');
        HttpResponse res = http.send(req);

        if (res.getStatusCode() != 200) {
            throw new AuraHandledException('API Error: ' + res.getStatusCode());
        }

        Map<String, Object> result = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
        List<Object> rawCandidates = (List<Object>) result.get('candidates');
        if (rawCandidates == null) rawCandidates = new List<Object>();

        // 5Ô∏è‚É£ Wrap and sort ALL API candidates first
        List<CandidateWrapper> allApiCandidates = new List<CandidateWrapper>();
        for (Object obj : rawCandidates) {
            Map<String, Object> cand = (Map<String, Object>) obj;
            String profileUrl = (String) cand.get('profileUrl');
            if (String.isBlank(profileUrl) || existingProfiles.contains(profileUrl)) continue;

            Decimal exp = 0;
            if (cand.containsKey('experienceYears') && cand.get('experienceYears') != null) {
                try { exp = Decimal.valueOf(String.valueOf(cand.get('experienceYears'))); } catch (Exception e) {}
            }

            String skillsStr = '';
            if (cand.containsKey('skills') && cand.get('skills') != null) {
                List<Object> sList = (List<Object>) cand.get('skills');
                List<String> temp = new List<String>();
                for (Object s : sList) temp.add((String) s);
                skillsStr = String.join(temp, ', ');
            }

            Candidate__c newCand = new Candidate__c(
                Candidate_Name__c = (String) cand.get('candidateName'),
                Profile_URL__c    = profileUrl,
                Email__c          = (String) cand.get('email'),
                Phone_Number__c   = (String) cand.get('phone'),
                Skills__c         = skillsStr,
                Experience__c     = exp,
                Location__c       = (String) cand.get('location'),
                Job_Post__c       = jobPost.Id
            );
            allApiCandidates.add(new CandidateWrapper(newCand, jobPost.Location__c, requiredSkills));
        }
        
        // Sort API candidates and take only the limit
        allApiCandidates.sort();
        List<Candidate__c> limitedApiCandidates = new List<Candidate__c>();
        for (Integer i = 0; i < Math.min(fetchLimit, allApiCandidates.size()); i++) {
            limitedApiCandidates.add(allApiCandidates[i].candidateRec);
        }

        // 6Ô∏è‚É£ Combine existing + limited new candidates
        List<CandidateWrapper> combined = new List<CandidateWrapper>();
        for (Candidate__c c : topExisting) combined.add(new CandidateWrapper(c, jobPost.Location__c, requiredSkills));
        for (Candidate__c c : limitedApiCandidates) combined.add(new CandidateWrapper(c, jobPost.Location__c, requiredSkills));

        combined.sort();

        // 7Ô∏è‚É£ Determine new rankings
        List<Candidate__c> newTopCandidates = new List<Candidate__c>();
        Integer rank = 1;
        for (CandidateWrapper cw : combined) {
            cw.candidateRec.Rank__c = rank;
            cw.candidateRec.Is_Top__c = true;
            newTopCandidates.add(cw.candidateRec);
            rank++;
        }

        // 8Ô∏è‚É£ Insert new candidates
        if (!limitedApiCandidates.isEmpty()) insert limitedApiCandidates;

        // 9Ô∏è‚É£ Update existing candidates
        List<Candidate__c> toUpdate = new List<Candidate__c>();
        for (Candidate__c c : topExisting) {
            for (Candidate__c updated : newTopCandidates) {
                if (c.Id == updated.Id) {
                    c.Rank__c = updated.Rank__c;
                    toUpdate.add(c);
                    break;
                }
            }
        }
        if (!toUpdate.isEmpty()) update toUpdate;

        // üîü Prepare response
        List<Candidate__c> finalList = [
            SELECT Id, Candidate_Name__c, Profile_URL__c, Experience__c,
                   Skills__c, Location__c, Rank__c, Is_Top__c
            FROM Candidate__c
            WHERE Job_Post__c = :jobPostId AND Is_Top__c = true
            ORDER BY Rank__c ASC
        ];

        FetchResponse resp = new FetchResponse();
        resp.message = limitedApiCandidates.size() + ' best candidates fetched and ranked.';
        resp.candidates = finalList;
        return resp;
    }
}
